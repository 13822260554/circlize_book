[
["high-level-genomic-functions.html", "Chapter 10 High-level genomic functions 10.1 Ideograms 10.2 Heatmaps 10.3 Labels 10.4 Genomic density and Rainfall plot", " Chapter 10 High-level genomic functions In this chapter, several high-level functions which create tracks are introduced. 10.1 Ideograms circos.initializeWithIdeogram() initializes the circular plot and adds ideogram track if the cytoband data is available. Actually, the ideograms are drawn by circos.genomicIdeogram(). circos.genomicIdeogram() creates a thin track of ideograms and can be used anywhere in the circle. By default it adds ideograms for human genome hg19 (Figure 10.1). circos.initializeWithIdeogram(plotType = c(&quot;name&quot;, &quot;axis&quot;)) circos.track(ylim = c(0, 1)) circos.genomicIdeogram() # put ideogram as the third track circos.genomicIdeogram(track.height = 0.2) Figure 10.1: Circular ideograms. 10.2 Heatmaps Matrix which corresponds to genomic regions can be visualized as heatmaps. Heatmaps complete fill the track and there are connection lines connect heatmaps and positions in the genome. `circos.genomicHeamtap() draws connection lines and heatmaps as two tracks and combines them as a integrated track. Generally, all numeric columns (excluding the first three columns) in the input data frame are used to make the heatmap. Colors can be specfied as a color matrix or a color mapping function generated by colorRamp2(). The height of the connection line track and the heatmap track can be set by connection_height and heatmap_height arguments. Also parameters for the styles of lines and rectangle borders can be adjusted, please check the help page of circos.genomicHeatmap(). circos.initializeWithIdeogram() bed = generateRandomBed(nr = 100, nc = 4) col_fun = colorRamp2(c(-1, 0, 1), c(&quot;green&quot;, &quot;black&quot;, &quot;red&quot;)) circos.genomicHeatmap(bed, col = col_fun, side = &quot;inside&quot;, border = &quot;white&quot;) circos.clear() In the left figure in Figure 10.2, the heatmaps are put inside the normal genomic track. Heatmaps are also be put outside the normal genomic track by setting side = &quot;outside&quot; (Figure 10.2, right). circos.initializeWithIdeogram(plotType = NULL) circos.genomicHeatmap(bed, col = col_fun, side = &quot;outside&quot;, line_col = as.numeric(factor(bed[[1]]))) circos.genomicIdeogram() circos.clear() Figure 10.2: Genomic heamtaps. 10.3 Labels circos.genomicLabels() adds text labels for regions specified. Positions of labels are automatically adjusted so that they do not overlap to each other. Similar as circos.genomicHeatmap(), circos.genomicLabels() also creates two tracks where one for the connection lines and one for the labels. You can set the height of the labels track to be the maximum width of labels by labels_track = max(strwidth(labels)). padding argument controls the gap between two neighbouring labels. circos.initializeWithIdeogram() bed = generateRandomBed(nr = 50, fun = function(k) sample(letters, k, replace = TRUE)) bed[1, 4] = &quot;aaaaa&quot; circos.genomicLabels(bed, labels.column = 4, side = &quot;inside&quot;) circos.clear() Similarlly, labels can be put outside of the normal genomic track (Figure 10.3 right). circos.initializeWithIdeogram(plotType = NULL) circos.genomicLabels(bed, labels.column = 4, side = &quot;outside&quot;, col = as.numeric(factor(bed[[1]])), line_col = as.numeric(factor(bed[[1]]))) circos.genomicIdeogram() circos.clear() Figure 10.3: Genomic labels. 10.4 Genomic density and Rainfall plot Rainfall plots are used to visualize the distribution of genomic regions in the genome. Rainfall plots are particularly useful to identify clusters of regions. In the rainfall plot, each dot represents a region. The x-axis corresponds to the genomic coordinate, and the y-axis corresponds to the minimal distance (log10 transformed) of the region to its two neighbouring regions. A cluster of regions will appear as a “rainfall” in the plot. circos.genomicRainfall() calculates neighbouring distance for each region and draw as points on the plot. Since circos.genomicRainfall() generates data on y-direction (log10(distance)), it is actually a high-level function which creates a new track. The input data can be a single data frame or a list of data frames. circos.genoimcRainfall(bed) circos.genoimcRainfall(bed_list, col = c(&quot;red&quot;, &quot;green&quot;)) However, if the amount of regions in a cluster is high, dots will overlap, and direct assessment of the number and density of regions in the cluster will be impossible. To overcome this limitation, additional tracks are added which visualize the genomic density of regions (defined as the fraction of a genomic window that is covered by genomic regions). circos.genomicDensity() calculates how much a genomic window is covered by regions in bed. It is also a high-level function and creates a new track. The input data can be a single data frame or a list of data frames. circos.genomicDensity(bed) circos.genomicDensity(bed, baseline = 0) circos.genomicDensity(bed, window.size = 1e6) circos.genomicDensity(bedlist, col = c(&quot;#FF000080&quot;, &quot;#0000FF80&quot;)) Following example makes a rainfall plot for differentially methylated regions (DMR) and their genomic densities. In the plot, red corresponds to hyper-methylated DMRs (gain of methylation) and blue corresponds to hypo-methylated DMRs (loss of methylation). You may see how the combination of rainfall track and genomic density track helps to get a more precise inference of the distribution of DMRs on genome (Figure 10.4). load(system.file(package = &quot;circlize&quot;, &quot;extdata&quot;, &quot;DMR.RData&quot;)) par(mar = c(1, 1, 1, 1)) circos.initializeWithIdeogram(chromosome.index = paste0(&quot;chr&quot;, 1:22)) bed_list = list(DMR_hyper, DMR_hypo) circos.genomicRainfall(bed_list, pch = 16, cex = 0.4, col = c(&quot;#FF000080&quot;, &quot;#0000FF80&quot;)) circos.genomicDensity(DMR_hyper, col = c(&quot;#FF000080&quot;), track.height = 0.1) circos.genomicDensity(DMR_hypo, col = c(&quot;#0000FF80&quot;), track.height = 0.1) Figure 10.4: Genomic rainfall plot and densities. circos.clear() "]
]
